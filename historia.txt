HOLA MUNDO ESTE ES UN 

DOCUMENTO DE PRUEBA PARA PODER OBSERVAR EL PODER DE GIT

LA HISTORIA DE MI VIDA ESPERO PODER SER MEJOR CADA DIA 

QUIERO CRECER MUCHO Y HOY PIENZO DEDICAR AL MENOS UNAS 4 HORAS A ESTUDIAR Y ESPERO QUE ASI SEA SIEMPRE

LO ESTOY LOGRANDO ESTOY ESTUDIANDO JEJEJE

Bueno aquie estamos actualizando ... retomando todo lo aprendido este dia 25 de Julio de 2022

-- sabemos que para saber lo que ha pasado en un Documento usamos el comando Git log

-- para analizar las diferencias usamos Git diff [ codigo 1 de los commits a comparar] [codigo 2 de los commits a 
comparar]

-- para ver los cambios que han ocurrido en un commit usamos git show

-- para agregar un commit al modo espera usamos git add [nombre del archivo].extension

-- si queremos agregar a la lista de espera para commit una carpeta y no solo el archivo usamos git add .

-- para remover del cache o stages usamos git rm --cached [nombre del archivo].extencion

-- para saber el estado de Nuestro commit usamos git status

- si ya vamos a mandar el commit o ya estamos seguros de lo que tenemos solo usamos git commit -m "mensaje del 
commit"

--si aun no se configura el entorno de git usaremos los comandos git config --global user.name "Luis Alfonso"
-- git config --global user.email "alfonso.garcia.info@gmail.com" esto nos servira para saber quien fue el que 
edito el commit.

empezare motivandome mas cada dia necesitamos tambien hacer ejercicio mi amigo porfavor hay que moderar lo que 
comemos vamos a por las 200 libras se que podemos .. actualmente estamos en 245 Libras la meta son 5 Lbs menos por
semana se que es mucho pero se puede full keto.. 

100 burpess al dia si se puede

Bueno aqui estamos retomando desde el dia 5 de Septiembre de 2022 al parecer me toma mucho darle continuidad a las cosas
hoy estaremos viendo como funcional el regreso en lineas temporales de Git

-- git checkout : funciona de la siguiente manera .. nos permite desplazarnos entre las ramas ya creadas
--cambia y restaura los archivos del arbol de trabajo y se usa de la siguiente manera git checkout [id del commit en especifico] [nombre del archivo] y tendremos la version
del commit que mandemos a llamar; si queremos actualizar solo debemos de usar git add . esto modifica toda la rama principal borrando todos los datos posteriores 
en caso de no querer eso solo no hacemos commit y usamos el llamdo a la rama Master y el nombre del archivo para obtener la version mas reciente del trabajo
ejemplo de esto seria git checkout master [nombre del archivo].extencion 

retomando el dia 8 de octubre desde hoy vamos con todo se que me incumplo mucho pero deberia de darme verguenza el ver que indiciplinado soy ... hoy he olvidado el como se hace el git reset y tendre que estudiarlo
nuevamente porque me da pena el ver en lo que no me he convertido y que aun no alcanzo mis metas y propositos pero trataremos de mejorar

agregare lo que seria la clase de hoy que son como crear una llave ssh en la pc y llevarla a github para que jamas pida password nuevamente al hacer push o pull ... debemos de llevar la llave publica a nuestro github
esta se encuentra en homme o la siguiente direccion ~/.ssh/id_rsa.pub la abrimos con VScode y la copiamos y pegamos en github

primero que nada debemos de poscionarnos en la raiz de nuestra pc es decir en nuestro home ~

luego debemos insertar el siguiente comando ssh-keygen -t rsa -b 4096 -C "[aqui agregamos nuestro email]"

una vez creada nos dira si el directorio es el correcto y aceptamos si es asi y luego nos dira si queremos incluir contrase√±a de seguridad extra ... es una buena practica el hacerlo asi que si.

en windows y linux la manera de agregar la llave al servidor de llaves SSH es la misma por lo que primero debemos de evaluar que este este corriendo usando el siguiente comando :

eval $(ssh-agent -S) este nos debera arrojar si esta corriendo y tambien nos dira su PID o el numero que ocupa en el proceso confirmando esto haremos lo siguiente.

vamos a gregar la llave al servidor de llaves con el siguiente comando : ssh-add ~/.ssh/id_rsa

listo con esto ya deberiamos de poder terner funcionando la llave privada y publica de la pc con github.

para cambiar el modo que veniamos usando que es el http y quedarnos con el SSH debemos de hacer el cambio siguiente o haber iniciado usando el SSH :

git remote set-url origin [url del repositorio en git ssh]


edicion nueva de la cabezera de header..

veremos como subimos nuevas cabeceras al repocitorio

miercoles 12 de octubre hoy se deberia de pagar el internet [ retomando el curso de control de versiones de git y git hub]

hoy veremos lo que son los tags como crearlos y como borrarlos aparte aprenderemos a crear alias en nuestro entorno de git.

un ejemplo de para que sirve un alias es para poder acortar un comando en especifico que seria muy largo de escribir y en una sola palabra tendria el mismo resultado por ejemplo;

git log --all --graph --decorate --oneline este comando nos permitiria ver todo el log o registro de nuestro proyecto de forma ordenada y bonita pero es algo largo para ello encapsularemos el comando con
sus atributos con el siguiente alias arbolito="git log --all --graph --decorate --oneline" de esta forma obtendremos un alias corto que con una sola palabra ejecutara el comando con sus atributos.

pero el alias solo durara una sesion si se quiere hacer permanente ya sea para un solo proyecto o de forma global para siempre usarlo deberiamos de seguir las siguiente instrucciones:

git config alias.arbolito "log --all --graph --decorate --oneline" este nos servira solo para un proyecto en git
git config --global alias.arbolito "log --all --graph --decorate --oneline" este nos servira para todos los proyectos de git ya que esta de forma local

para correr un alias solo debemos poner su nombre por ejemplo [ git arbolito ]

------ahora veremos los tags en git y github------

los tags son etiquetas que nos ayudan a saber en que version estamos trabajando del proyecto por ejemplo la version V0.1 sirve para llevar un control mas detallado del proyecto y las podremos agregar de la siguiente
manera:

Comandos para trabajar con etiquetas:
-- Crear un nuevo tag y asignarlo a un commit: git tag -a [nombre-del-tag] -m "[mensaje del tag]" [id-del-commit].
-- Borrar un tag en el repositorio local: git tag -d [nombre-del-tag].
-- Listar los tags de nuestro repositorio local: git tag o git show-ref --tags.
-- Publicar un tag en el repositorio remoto: git push origin --tags.
-- Borrar un tag del repositorio remoto: git tag -d [nombre-del-tag] y git push origin :refs/tags/nombre-del-tag.

completamos con satisfaccion el curso de git y git hub pero es apenas la punta del iceber necesitare practicar a diario para que no se me olvide al menos lo basico 

vere nuevos videos y emepezare a subir el contenido a mi respositorio en la nube espero sea genial tambien vere la carrera de DEVOPS para manejo de servidores


